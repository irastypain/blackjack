#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../lib', __dir__)

require 'commander'
require 'blackjack'
require 'blackjack/console'

Blackjack::Console.print_game_board
Blackjack::Console.print_message('You are welcome to Blackjack!')

Blackjack::Console.new_line
Blackjack::Console.print_message('May I have your name?')
name = ask('My name: ')
player = Blackjack::Player.new(name)

min_bet = Blackjack::Round::MIN_BET
money_message = "How much money do you want to have before you start the game? (minimal #{min_bet})"

loop do
  Blackjack::Console.new_line
  Blackjack::Console.print_message(money_message)
  total_money = ask('My money: ', Float)
  if total_money >= min_bet
    player.take_money(total_money)
    break
  end
end

Blackjack::Console.print_game_board

game = Blackjack.new_game(player)

# statuses of round, when unavailable player's and dealer's hands
statuses = [
  Blackjack::Round::STATUS_NEW,
  Blackjack::Round::STATUS_BET_ACCEPTED
]

game_errors = []

loop do
  if player.total_money < min_bet
    Blackjack::Console.new_line
    Blackjack::Console.print_message("Sorry, you haven't enough money that to play...")
  end

  Blackjack::Console.new_line
  game_action = Commander::UI.choose('Choose you a one action:', *game.actions)

  begin
    game.do_action(game_action)
  rescue RuntimeError => error
    game_errors << error
  end

  unless game_errors.empty?
    Blackjack::Console.print_errors(game_errors)
    game_errors.clear
  end

  if game.status == Blackjack::Game::STATUS_PLAY
    round_errors = []

    loop do
      Blackjack::Console.print_game_board
      Blackjack::Console.print_current_state(game)
      Blackjack::Console.print_cards_state(game) unless statuses.include?(game.round.status)
      unless round_errors.empty?
        Blackjack::Console.print_errors(round_errors)
        round_errors.clear
      end

      if game.round_ended?
        Blackjack::Console.print_result(game)
        break
      end

      Blackjack::Console.new_line
      round_action = Commander::UI.choose('Choose you a one action:', *game.round.actions)

      begin
        game.round.do_action(round_action)
      rescue RuntimeError => error
        round_errors << error
      end
    end
  end

  if game.status == Blackjack::Game::STATUS_STOP
    Blackjack::Console.clear_screen
    break
  end
end
